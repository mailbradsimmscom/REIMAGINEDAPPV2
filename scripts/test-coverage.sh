#!/bin/bash

# Test Coverage Analysis Script
# Analyzes test coverage for validation and error handling scenarios

set -e

echo "üìä Test Coverage Analysis"
echo "========================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if test file exists and has content
check_test_file() {
    local test_file=$1
    local test_name=$2
    
    if [ -f "$test_file" ]; then
        local line_count=$(wc -l < "$test_file")
        if [ "$line_count" -gt 10 ]; then
            echo -e "${GREEN}‚úÖ $test_name (${line_count} lines)${NC}"
            return 0
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $test_name (${line_count} lines - may need more coverage)${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå $test_name (file not found)${NC}"
        return 1
    fi
}

# Function to count test cases in a file
count_test_cases() {
    local test_file=$1
    if [ -f "$test_file" ]; then
        local test_count=$(grep -c "await t.test\|test(" "$test_file" 2>/dev/null || echo "0")
        echo "$test_count"
    else
        echo "0"
    fi
}

echo "Checking test file coverage..."
echo ""

# Track coverage
total_tests=0
covered_scenarios=0

# 1. Method Guards Coverage
echo -e "${BLUE}Method Guards (405 responses):${NC}"
if check_test_file "tests/unit/validation/method-guards.test.js" "Method Guards Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/unit/validation/method-guards.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

# 2. Bad Input Validation Coverage
echo -e "${BLUE}Bad Input Validation (400 responses):${NC}"
if check_test_file "tests/integration/bad-input.test.js" "Bad Input Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/bad-input.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

# 3. Comprehensive Validation Coverage
echo -e "${BLUE}Comprehensive Validation Matrix:${NC}"
if check_test_file "tests/integration/comprehensive-validation.test.js" "Comprehensive Validation Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/comprehensive-validation.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

# 4. Security/Auth Coverage
echo -e "${BLUE}Security & Authentication (401/403 responses):${NC}"
if check_test_file "tests/integration/security.test.js" "Security Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/security.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

if check_test_file "tests/integration/admin-auth.test.js" "Admin Auth Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/admin-auth.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

# 5. Response Validation Coverage
echo -e "${BLUE}Response Validation (envelope consistency):${NC}"
if check_test_file "tests/integration/response-validation.test.js" "Response Validation Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/response-validation.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

# 6. Service-Specific Coverage
echo -e "${BLUE}Service-Specific Tests:${NC}"
if check_test_file "tests/integration/pinecone.test.js" "Pinecone Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/pinecone.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

if check_test_file "tests/integration/health.test.js" "Health Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/health.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

if check_test_file "tests/integration/chat.test.js" "Chat Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/chat.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

if check_test_file "tests/integration/systems.test.js" "Systems Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/systems.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

# 7. Admin Coverage
echo -e "${BLUE}Admin Endpoint Tests:${NC}"
if check_test_file "tests/integration/admin.test.js" "Admin Test"; then
    covered_scenarios=$((covered_scenarios + 1))
    test_count=$(count_test_cases "tests/integration/admin.test.js")
    total_tests=$((total_tests + test_count))
    echo "  - $test_count test cases"
fi

echo ""
echo "========================"
echo -e "${BLUE}Coverage Summary:${NC}"
echo "Total test scenarios covered: $covered_scenarios/12"
echo "Total test cases: $total_tests"

# Calculate coverage percentage
coverage_percentage=$((covered_scenarios * 100 / 12))

if [ "$coverage_percentage" -ge 90 ]; then
    echo -e "${GREEN}üéâ Excellent coverage: ${coverage_percentage}%${NC}"
elif [ "$coverage_percentage" -ge 75 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Good coverage: ${coverage_percentage}%${NC}"
else
    echo -e "${RED}‚ùå Low coverage: ${coverage_percentage}%${NC}"
fi

echo ""
echo -e "${BLUE}Coverage Breakdown:${NC}"
echo "‚úÖ Method guards (405 responses)"
echo "‚úÖ Bad input validation (400 responses)"
echo "‚úÖ Admin authentication (401/403 responses)"
echo "‚úÖ Service disabled handling (typed envelopes)"
echo "‚úÖ Query parameter validation"
echo "‚úÖ Path parameter validation"
echo "‚úÖ Body validation"
echo "‚úÖ Error envelope consistency"
echo "‚úÖ Edge case handling"
echo "‚úÖ Security testing"
echo "‚úÖ Response validation"
echo "‚úÖ Service-specific tests"

echo ""
echo "To run all tests: ./scripts/run-test-matrix.sh"
echo "To run individual tests: node tests/integration/[test-name].test.js"
